{"version":3,"sources":["components/NewTodo/TodoForm.module.css","components/UI/Container.js","components/Todos/TodoContaine.js","components/Todos/Todos.js","components/NewTodo/TodoForm.js","components/NewTodo/NewTodo.js","App.js","index.js"],"names":["module","exports","Container","props","classes","className","children","TodoContaine","useState","isDone","setIsDone","title","description","icon","faCircleCheck","onClick","e","Todos","items","map","item","id","TodoForm","enteredTitile","setEnteredTitile","enteredDescription","setEnteredDescription","isValid","setIsValid","onSubmit","event","preventDefault","todoData","onSaveTodoData","styles","invalid","console","log","type","value","onChange","target","NewTodo","enteredTodoData","Math","random","toString","onAddTodo","DUMMY_TODOS","App","todos","setTodos","todo","prevTodos","ReactDOM","render","document","getElementById"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,oBAAoB,oCAAoC,mBAAmB,mCAAmC,kBAAkB,kCAAkC,QAAU,4B,oNCO/KC,EALG,SAACC,GACjB,IAAMC,EAAU,aAAeD,EAAME,UACrC,OAAO,qBAAKA,UAAWD,EAAhB,SAA0BD,EAAMG,Y,gBCuB1BC,G,MArBM,SAACJ,GAEpB,MAA4BK,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OACE,sBAAKL,UAAS,eAAUI,EAAS,OAAS,IAA1C,UACE,eAAC,EAAD,WACE,6BAAKN,EAAMQ,QACX,4BAAIR,EAAMS,iBAEZ,8BACE,cAAC,IAAD,CAAiBC,KAAMC,IAAeC,QAZpB,SAACC,GAEvB,IAAe,IAAXP,EAAiB,OAAOC,GAAU,GACtCA,GAAU,aCaCO,EApBD,SAACd,GAGb,OACE,sBAAKE,UAAU,QAAf,UACE,eAAC,EAAD,WACE,2CACA,yEAEDF,EAAMe,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEET,MAAOS,EAAKT,MACZC,YAAaQ,EAAKR,aAFbQ,EAAKC,W,+BC8DLC,EA1EE,SAACnB,GAKhB,MAA0CK,mBAAS,IAAnD,mBAAOe,EAAP,KAAsBC,EAAtB,KACA,EAAoDhB,mBAAS,IAA7D,mBAAOiB,EAAP,KAA2BC,EAA3B,KACA,EAA8BlB,oBAAS,GAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KAgCA,OACE,sBAAMC,SAlBc,SAACC,GAIrB,GAFAA,EAAMC,iBAEgB,KAAlBR,GAA+C,KAAvBE,EAC1B,OAAOG,GAAW,GAEpB,IAAMI,EAAW,CACfrB,MAAOY,EACPX,YAAaa,GAGftB,EAAM8B,eAAeD,GAErBR,EAAiB,IACjBE,EAAsB,KAGtB,SACE,eAAC,EAAD,WACE,2CACA,sDACA,sBACErB,UAAS,UAAK6B,IAAO,qBAAZ,aACNP,GAAWO,IAAOC,QADZ,YAELC,QAAQC,KAAKV,IAHnB,UAKE,sBAAKtB,UAAW6B,IAAO,oBAAvB,UACE,0CACA,uBACEI,KAAK,OACLC,MAAOhB,EACPiB,SA7CiB,SAACV,GAE5BN,EAAiBM,EAAMW,OAAOF,aA8CxB,sBAAKlC,UAAW6B,IAAO,oBAAvB,UACE,gDACA,uBACEI,KAAK,OACLC,MAAOd,EACPe,SAhDsB,SAACV,GACX,KAAlBP,GAA+C,KAAvBE,GAC1BG,GAAW,GAGbF,EAAsBI,EAAMW,OAAOF,gBA+C/B,qBAAKlC,UAAW6B,IAAO,mBAAvB,SACE,wBAAQI,KAAK,SAAb,8BClDKI,EAlBC,SAACvC,GAWf,OACE,qBAAKE,UAAU,WAAf,SACE,cAAC,EAAD,CAAU4B,eAXc,SAACU,GAE3B,IAAMX,EAAQ,2BACTW,GADS,IAEZtB,GAAIuB,KAAKC,SAASC,aAGpB3C,EAAM4C,UAAUf,SCRdgB,EAAc,CAClB,CACE3B,GAAI,KACJV,MAAO,QACPC,YAAa,mBAuBFqC,EAnBH,WAEV,MAA0BzC,mBAASwC,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KASA,OACE,gCACE,cAAC,EAAD,CAASJ,UATU,SAACK,GAEtBD,GAAS,SAACE,GACR,MAAM,CAAED,GAAR,mBAAiBC,UAOjB,cAAC,EAAD,CAAOnC,MAAOgC,QCtBpBI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d72468c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"new-todo-controls\":\"TodoForm_new-todo-controls__2WNm0\",\"new-todo-control\":\"TodoForm_new-todo-control__2WFik\",\"new-todo-action\":\"TodoForm_new-todo-action__3M6pG\",\"invalid\":\"TodoForm_invalid__39gBH\"};","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\nconst Container = (props) => {\r\n  const classes = \"container \" + props.className;\r\n  return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircleCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./TodoContaine.css\";\r\nimport Container from \"../UI/Container\";\r\n\r\nconst TodoContaine = (props) => {\r\n  // Create useState Varible to load value of done\r\n  const [isDone, setIsDone] = useState(false);\r\n  const doneTodoHandler = (e) => {\r\n    // Create Operation toggole\r\n    if (isDone === true) return setIsDone(false);\r\n    setIsDone(true);\r\n  };\r\n  return (\r\n    <div className={`todo ${isDone ? \"done\" : \"\"}`}>\r\n      <Container>\r\n        <h2>{props.title}</h2>\r\n        <p>{props.description}</p>\r\n      </Container>\r\n      <div>\r\n        <FontAwesomeIcon icon={faCircleCheck} onClick={doneTodoHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoContaine;\r\n","import React from \"react\";\r\n\r\nimport \"./Todos.css\";\r\nimport Container from \"../UI/Container\";\r\nimport TodoContaine from \"./TodoContaine\";\r\n\r\nconst Todos = (props) => {\r\n  // Use map To Add Todo Dynamic In Arr\r\n  // Use Key T Do not Replace Index Of Arr\r\n  return (\r\n    <div className=\"todos\">\r\n      <Container>\r\n        <h1>Todo List</h1>\r\n        <h3>Get things done, one item at a time.</h3>\r\n      </Container>\r\n      {props.items.map((item) => (\r\n        <TodoContaine\r\n          key={item.id}\r\n          title={item.title}\r\n          description={item.description}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useState } from \"react\";\r\n\r\nimport styles from \"./TodoForm.module.css\";\r\nimport Container from \"../UI/Container\";\r\n\r\nconst TodoForm = (props) => {\r\n  // Create Event To Lithen Data from Input\r\n  // 1 => Create Evenet onChange to lithen any word entered in input\r\n  // 2 => Create Two Function to Get Value Of Input And replace value in enterd\r\n  // 3 => Create Event onSubmit To Get All Data Of Todo\r\n  const [enteredTitile, setEnteredTitile] = useState(\"\");\r\n  const [enteredDescription, setEnteredDescription] = useState(\"\");\r\n  const [isValid, setIsValid] = useState(true);\r\n\r\n  const enteredTitileHandler = (event) => {\r\n    // Lithen Event To get Data And Replace value enteredTitle\r\n    setEnteredTitile(event.target.value);\r\n  };\r\n\r\n  const enteredDescriptionHandler = (event) => {\r\n    if (enteredTitile === \"\" || enteredDescription === \"\") {\r\n      setIsValid(true);\r\n    }\r\n    // Lithen Event To get Data And Replace value enteredDescription\r\n    setEnteredDescription(event.target.value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    // To Do not Reload Page When Send Data\r\n    event.preventDefault();\r\n    // Check If Todo It is Empty\r\n    if (enteredTitile === \"\" || enteredDescription === \"\")\r\n      return setIsValid(false);\r\n    // Add Data Of Todo In One Obj\r\n    const todoData = {\r\n      title: enteredTitile,\r\n      description: enteredDescription,\r\n    };\r\n    // Send Obj To parent To show in Parent Component\r\n    props.onSaveTodoData(todoData);\r\n    // Empty Value of input after send data\r\n    setEnteredTitile(\"\");\r\n    setEnteredDescription(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <Container>\r\n        <h1>Todo List</h1>\r\n        <h3>Add new thing to do.</h3>\r\n        <div\r\n          className={`${styles[\"new-todo-controls\"]} ${\r\n            !isValid && styles.invalid\r\n          } ${console.log(!isValid)}`}\r\n        >\r\n          <div className={styles[\"new-todo-control\"]}>\r\n            <label>Title</label>\r\n            <input\r\n              type=\"text\"\r\n              value={enteredTitile}\r\n              onChange={enteredTitileHandler}\r\n            />\r\n          </div>\r\n          <div className={styles[\"new-todo-control\"]}>\r\n            <label>Description</label>\r\n            <input\r\n              type=\"text\"\r\n              value={enteredDescription}\r\n              onChange={enteredDescriptionHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={styles[\"new-todo-action\"]}>\r\n          <button type=\"submit\">Add Todo</button>\r\n        </div>\r\n      </Container>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport \"./NewTodo.css\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst NewTodo = (props) => {\r\n  // Get Data From Child => TodoForm\r\n  const saveTodoDataHandler = (enteredTodoData) => {\r\n    // Parameter is data get from child => todoData\r\n    const todoData = {\r\n      ...enteredTodoData,\r\n      id: Math.random().toString(),\r\n    };\r\n    // Send Obj To parent To show in Parent Component\r\n    props.onAddTodo(todoData)\r\n  };\r\n  return (\r\n    <div className=\"new-todo\">\r\n      <TodoForm onSaveTodoData={saveTodoDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewTodo;\r\n","import React, { useState } from \"react\";\nimport Todos from \"./components/Todos/Todos\";\nimport NewTodo from \"./components/NewTodo/NewTodo\";\n\n// Dummy Data To Add Todos Dynamic\nconst DUMMY_TODOS = [\n  {\n    id: \"e1\",\n    title: \"todo1\",\n    description: \"Test Test Test\",\n  },\n];\n\nconst App = () => {\n  // Craete Event To get Data from newTodo and send To Show in Todos\n  const [todos, setTodos] = useState(DUMMY_TODOS);\n\n  const addTodoHandler = (todo) => {\n    // use ...todo to add new Data with old data\n    setTodos((prevTodos) => {\n      return [todo, ...prevTodos];\n    });\n  };\n\n  return (\n    <div>\n      <NewTodo onAddTodo={addTodoHandler} />\n      <Todos items={todos} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}